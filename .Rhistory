fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="./data/database.sqlite")
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="../data/database.sqlite")
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="../data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
par(mfrow = c(1, 2))
plot(batting$DOUBLE, batting$RUNS, ylab = "Runs", xlab = "Doubles", main = "Scatterplot")
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="./data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
par(mfrow = c(1, 2))
plot(batting$DOUBLE, batting$RUNS, ylab = "Runs", xlab = "Doubles", main = "Scatterplot")
abline(0,2.4, col="red",)
abline(-150,2.4, col="blue",)
abline(200,2.4, col="blue",)
qqnorm(batting$RUNS, main = "QQ-Plot")
qqline(batting$RUNS)
summary(lm(batting$DOUBLE ~ batting$RUNS))
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="./data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
par(mfrow = c(1, 2))
plot(batting$DOUBLE, batting$RUNS, ylab = "Runs", xlab = "Doubles", main = "Scatterplot")
abline(0,2.4, col="red",)
abline(-150,2.4, col="blue",)
abline(200,2.4, col="blue",)
qqnorm(batting$RUNS, main = "QQ-Plot")
qqline(batting$RUNS)
library(lmtest)
g <- lm(batting$RUNS ~ batting$DOUBLE)
dwtest(batting$RUNS ~ batting$DOUBLE, data=batting)
# no evidence of correlation - proves independence
slm <- summary(g)
anova_lm <- anova(g)
test_stat <- slm$coefficients[,3][2]
test_stat #102.942 # from slm
p_value <- slm$coefficients[,4][2]
p_value
#calculate mean for runs
sample.mean <- mean(batting$RUNS)
print(paste("Sample Mean: ", sample.mean))
#standard error of mean
sample.n <- length(batting$RUNS)
sample.sd <- sd(batting$RUNS)
sample.se <- sample.sd/sqrt(sample.n)
print(paste("Standard Error: ", sample.se))
#find t-score
alpha = 0.05
degrees.freedom = sample.n -1
t.score = qt(p=alpha/2, df = degrees.freedom, lower.tail = F)
print(paste("t-Score: ", t.score))
#construct CI
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
print(paste("Lower Bound: ", lower.bound))
print(paste("Upper Bound: ", upper.bound))
#calculate mean for runs when doubles = 200
sample.mean <- mean(batting$RUNS[200])
print(paste("Sample Mean: ", sample.mean))
#standard error of mean
sample.n <- length(batting$RUNS)
sample.sd <- sd(batting$RUNS)
sample.se <- sample.sd/sqrt(sample.n)
print(paste("Standard Error: ", sample.se))
#find t-score
alpha = 0.05
degrees.freedom = sample.n -1
t.score = qt(p=alpha/2, df = degrees.freedom, lower.tail = F)
print(paste("t-Score: ", t.score))
#construct CI
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
print(paste("Lower Bound: ", lower.bound))
print(paste("Upper Bound: ", upper.bound))
l.model <- lm(batting$DOUBLE ~ 1, batting)
confint(l.model, level = 0.95)
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="./data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
par(mfrow = c(1, 2))
plot(batting$DOUBLE, batting$RUNS, ylab = "Runs", xlab = "Doubles", main = "Scatterplot")
abline(0,2.4, col="red",)
abline(-150,2.4, col="blue",)
abline(200,2.4, col="blue",)
qqnorm(batting$RUNS, main = "QQ-Plot")
qqline(batting$RUNS)
library(lmtest)
g <- lm(batting$RUNS ~ batting$DOUBLE)
dwtest(batting$RUNS ~ batting$DOUBLE, data=batting)
# no evidence of correlation - proves independence
slm <- summary(g)
anova_lm <- anova(g)
test_stat <- slm$coefficients[,3][2]
test_stat #102.942 # from slm
p_value <- slm$coefficients[,4][2]
p_value
#calculate mean for runs
sample.mean <- mean(batting$RUNS)
print(paste("Sample Mean: ", sample.mean))
#standard error of mean
sample.n <- length(batting$RUNS)
sample.sd <- sd(batting$RUNS)
sample.se <- sample.sd/sqrt(sample.n)
print(paste("Standard Error: ", sample.se))
#find t-score
alpha = 0.05
degrees.freedom = sample.n -1
t.score = qt(p=alpha/2, df = degrees.freedom, lower.tail = F)
print(paste("t-Score: ", t.score))
#construct CI
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
print(paste("Lower Bound: ", lower.bound))
print(paste("Upper Bound: ", upper.bound))
#calculate mean for runs when doubles = 200
sample.mean <- mean(batting$RUNS[200])
print(paste("Sample Mean: ", sample.mean))
#standard error of mean
sample.n <- length(batting$RUNS)
sample.sd <- sd(batting$RUNS)
sample.se <- sample.sd/sqrt(sample.n)
print(paste("Standard Error: ", sample.se))
#find t-score
alpha = 0.05
degrees.freedom = sample.n -1
t.score = qt(p=alpha/2, df = degrees.freedom, lower.tail = F)
print(paste("t-Score: ", t.score))
#construct CI
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
print(paste("Lower Bound: ", lower.bound))
print(paste("Upper Bound: ", upper.bound))
l.model <- lm(batting$DOUBLE ~ 1, batting)
confint(l.model, level = 0.95)
summary(lm(batting$DOUBLE ~ batting$RUNS))
summary(lm(batting$DOUBLE ~ batting$RUNS))
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="./data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
par(mfrow = c(1, 2))
plot(batting$DOUBLE, batting$RUNS, ylab = "Runs", xlab = "Doubles", main = "Scatterplot")
abline(0,2.4, col="red",)
abline(-150,2.4, col="blue",)
abline(200,2.4, col="blue",)
qqnorm(batting$RUNS, main = "QQ-Plot")
qqline(batting$RUNS)
library(lmtest)
g <- lm(batting$RUNS ~ batting$DOUBLE)
dwtest(batting$RUNS ~ batting$DOUBLE, data=batting)
# no evidence of correlation - proves independence
slm <- summary(g)
anova_lm <- anova(g)
test_stat <- slm$coefficients[,3][2]
test_stat #102.942 # from slm
p_value <- slm$coefficients[,4][2]
p_value
#calculate mean for runs
sample.mean <- mean(batting$RUNS)
print(paste("Sample Mean: ", sample.mean))
#standard error of mean
sample.n <- length(batting$RUNS)
sample.sd <- sd(batting$RUNS)
sample.se <- sample.sd/sqrt(sample.n)
print(paste("Standard Error: ", sample.se))
#find t-score
alpha = 0.05
degrees.freedom = sample.n -1
t.score = qt(p=alpha/2, df = degrees.freedom, lower.tail = F)
print(paste("t-Score: ", t.score))
#construct CI
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
print(paste("Lower Bound: ", lower.bound))
print(paste("Upper Bound: ", upper.bound))
#calculate mean for runs when doubles = 200
sample.mean <- mean(batting$RUNS[200])
print(paste("Sample Mean: ", sample.mean))
#standard error of mean
sample.n <- length(batting$RUNS)
sample.sd <- sd(batting$RUNS)
sample.se <- sample.sd/sqrt(sample.n)
print(paste("Standard Error: ", sample.se))
#find t-score
alpha = 0.05
degrees.freedom = sample.n -1
t.score = qt(p=alpha/2, df = degrees.freedom, lower.tail = F)
print(paste("t-Score: ", t.score))
#construct CI
margin.error <- t.score * sample.se
lower.bound <- sample.mean - margin.error
upper.bound <- sample.mean + margin.error
print(paste("Lower Bound: ", lower.bound))
print(paste("Upper Bound: ", upper.bound))
l.model <- lm(batting$DOUBLE ~ 1, batting)
confint(l.model, level = 0.95)
summary(lm(batting$DOUBLE ~ batting$RUNS))
model <- lm(batting$RUNS ~ batting$DOUBLE)
res <- resid(model)
plot(fitted(model), res, ylab = "Residuals", xlab = "Fitted Model")
summary(lm(batting$DOUBLE ~ batting$RUNS))
test_stat <- slm$coefficients[,3][2]
test_stat #102.942 # from slm
p_value <- slm$coefficients[,4][2]
p_value
