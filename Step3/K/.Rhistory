fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
ggpairs(batting, columns = c.("HOME_RUNS","","","",""))
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="../../data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
ggpairs(batting, columns = 2:13)
ggpairs(batting, columns = c.("HOME_RUNS","","","",""))
ggpairs(batting, columns = c("HOME_RUNS","","","",""))
ggpairs(batting, columns = c.("HOME_RUNS","DOUBLE","SINGLES","TRIPLE","HITS"))
ggpairs(batting, columns = c("HOME_RUNS","DOUBLE","SINGLES","TRIPLE","HITS"))
ggpairs(batting, columns = c("HOME_RUNS","DOUBLE","SINGLES","TRIPLE","SINGLES"))
ggpairs(batting, columns = c("INT_WALKS","DOUBLE"))
ggpairs(batting, columns = c("INT_WALKS","DOUBLE", "TRIPPLE"))
ggpairs(batting, columns = c("INT_WALKS","DOUBLE", "TRIPLE"))
ggpairs(batting, columns = c("INT_WALKS","DOUBLE", "TRIPLE", "HAND","STOLEN_BASES"))
ggpairs(batting, columns = c("INT_WALKS","DOUBLE", "TRIPLE", "SINGLE","STOLEN_BASES"))
ggpairs(batting, columns = c("INT_WALKS","DOUBLE", "TRIPLE", "SINGLES","STOLEN_BASES"))
ggpairs(batting, columns = c("INT_WALKS","DOUBLE", "TRIPLE","STOLEN_BASES"))
ggpairs(batting, columns = c("INT_WALKS","DOUBLE", "TRIPLE","STOLEN_BASES", "HOME_RUNS"))
ggpairs(batting, columns = c("INT_WALKS","DOUBLE", "TRIPLE","STOLEN_BASES", "HOME_RUNS"))
ggpairs(batting, columns = c("INT_WALKS","SINGLES", "TRIPLE","STOLEN_BASES", "HOME_RUNS"))
ggpairs(batting, columns = c("INT_WALKS","AT_BAT", "BMI","STOLEN_BASES", "HAND"))
ggpairs(batting, columns = c("INT_WALKS","AT_BAT", "WALKS","STOLEN_BASES", "HIT_BY_PITCH"))
model_1 <- lm(batting$RUNS~batting$INT_WALK,batting$AT_BAT,batting$WALKS,batting$STOLEN_BASES,batting$HIT_BY_PITCH)
model_1 <- lm(batting$RUNS~c(batting$INT_WALK, batting$AT_BAT,batting$WALKS, batting$STOLEN_BASES, batting$HIT_BY_PITCH))
model_1 <- lm(batting$RUNS~batting$INT_WALK, batting$AT_BAT,batting$WALKS, batting$STOLEN_BASES, batting$HIT_BY_PITCH)
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT,batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH)
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT,batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH)
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT,batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH, data =batting)
model_2 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT,batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH, data =batting)
model_2 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS, data = batting)
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT,batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH, data = batting)
model_2 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS, data = batting)
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT,batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH, data = batting)
model_2 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS, data = batting)
model_1
model_2
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT + batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH)
model_2 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
model_1
model_2
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT + batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH)
model_2 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
SUMMARY(model_1)
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT + batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH)
model_2 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
summary(model_1)
summary(model_2)
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT + batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH)
model_2 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
summary(model_1, model_2)
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT + batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH)
model_2 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
anova(model_1, model_2)
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT + batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH)
model_2 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
anova(model_2, model_1)
model_1 <- lm(batting$RUNS~batting$INT_WALK + batting$AT_BAT + batting$WALKS + batting$STOLEN_BASES + batting$HIT_BY_PITCH)
model_2 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
anova(model_1, model_2)
model_1 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
model_2 <- lm(batting$RUNS~batting$SINGLES + batting$TRIPLES + batting$HOME_RUNS)
model_1 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
model_2 <- lm(batting$RUNS~batting$SINGLES + batting$TRIPLES + batting$HOME_RUNS)
model_1 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
model_2 <- lm(batting$RUNS~batting$SINGLES + batting$TRIPLES + batting$HOME_RUNS, data= batting)
model_1 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
model_2 <- lm(batting$RUNS~batting$SINGLES + batting$TRIPLES + batting$HOME_RUNS)
model_1 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
model_2 <- lm(RUNS~SINGLES + TRIPLES + HOME_RUNS, data = batting)
model_1 <- lm(batting$RUNS~batting$INT_WALKS + batting$SINGLES + batting$TRIPLE + batting$STOLEN_BASES + batting$HOME_RUNS)
model_2 <- lm(RUNS~SINGLES + TRIPLE + HOME_RUNS, data = batting)
anova(model_1, model_2)
model_1 <- lm(RUNS~INT_WALKS + SINGLES + TRIPLE + STOLEN_BASES + HOME_RUNS, data = batting)
model_2 <- lm(RUNS~SINGLES + TRIPLE + HOME_RUNS, data = batting)
anova(model_1, model_2)
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="../../data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
summary(lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting))
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
library(tidymodels)
library(leaps)
stat_model <- regsubsets(RUNS~HOME_RUNS + TRIPLE + DOUBLE + SINGLES + WALKS + INT_WALKS + STOLEN_BASES + HIT_BY_PITCH, data = batting,
method = 'seqrep',
nbest = 1,
nvmax = 4)
summary(stat_model)
studentize <- function(resid)
{
resid*sqrt((500 - 5 - 1)/(500 - 5 - resid^2))
}
par(mfrow = c(1, 2))
plot(augment(stat_model)$.hat, ylab="Leverage")
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
library(tidymodels)
library(leaps)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="../../data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
model_1 <- lm(RUNS~INT_WALKS + SINGLES + TRIPLE + STOLEN_BASES + HOME_RUNS, data = batting)
model_2 <- lm(RUNS~SINGLES + TRIPLE + HOME_RUNS, data = batting)
anova(model_1, model_2)
stat_model <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting)
res <- resid(stat_model)
plot(fitted(stat_model), res, ylab = 'Residuals', xlab = 'Fitted Model')
abline(0,0)
summary(lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting))
studentize <- function(resid)
{
resid*sqrt((500 - 5 - 1)/(500 - 5 - resid^2))
}
par(mfrow = c(1, 2))
plot(augment(stat_model)$.hat, ylab="Leverage")
exStdResid <- augment(stat_model)$.std.resid
exStdResid <- as.data.frame(exStdResid)
exStdResid[,2] <- exStdResid[,1]
exStdResid[,1] <- 1:500
colnames(exStdResid) <- (c("Index", "External Studentized Residuals"))
exStdResid[,2] <- studentize(exStdResid[,2])
plot(exStdResid)
abline(3,0)
abline(-3,0)
studentize <- function(resid)
{
resid*sqrt((500 - 5 - 1)/(500 - 5 - resid^2))
}
par(mfrow = c(1, 3))
plot(augment(stat_model)$.hat, ylab="Leverage")
exStdResid <- augment(stat_model)$.std.resid
exStdResid <- as.data.frame(exStdResid)
exStdResid[,2] <- exStdResid[,1]
exStdResid[,1] <- 1:500
colnames(exStdResid) <- (c("Index", "External Studentized Residuals"))
exStdResid[,2] <- studentize(exStdResid[,2])
plot(exStdResid)
abline(3,0)
abline(-3,0)
plot(augment(stat_model)$.cooksd, ylab ="Cook's Distance/Influence")
studentize <- function(resid)
{
resid*sqrt((500 - 5 - 1)/(500 - 5 - resid^2))
}
par(mfrow = c(1, 3))
plot(augment(stat_model)$.hat, ylab="Leverage")
exStdResid <- augment(stat_model)$.std.resid
exStdResid <- as.data.frame(exStdResid)
exStdResid[,2] <- exStdResid[,1]
exStdResid[,1] <- 1:500
colnames(exStdResid) <- (c("Index", "External Studentized Residuals"))
exStdResid[,2] <- studentize(exStdResid[,2])
plot(exStdResid)
abline(3,0)
abline(-3,0)
plot(augment(stat_model)$.cooksd, ylab ="Cook's Distance/Influence")
plot(stat_model)
plot(batting ~ doubles)
plot(batting$RUNS ~ batting$SINGLES)
plot(batting$RUNS ~ batting$SINGLES)
abline(stat_model)
plot(batting$RUNS ~ batting$SINGLES)
abline(stat_model, col="Blue")
plot(batting$RUNS ~ batting$SINGLES)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$SINGLES)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$WALKS)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$STOLEN_BASES)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$HOME_RUNS)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$SINGLES)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$WALKS)
abline(stat_model, col="Red")
plot(batting$RUNS ~ log(batting$STOLEN_BASES))
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$HOME_RUNS)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$SINGLES)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$WALKS)
abline(stat_model, col="Red")
plot(log(batting$RUNS) ~ batting$STOLEN_BASES)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$HOME_RUNS)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$SINGLES)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$WALKS)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$STOLEN_BASES)
abline(stat_model, col="Red")
plot(batting$RUNS ~ batting$HOME_RUNS)
abline(stat_model, col="Red")
abline(stat_model, col="Red")
plot(1,1)
abline(stat_model, col="Red")
plot(1,1)
abline(stat_model, col="Red")
plot(100,100)
abline(stat_model, col="Red")
plot(1000,1000)
abline(stat_model, col="Red")
which.max(augment(stat_model)$.cooksd)
batting
plot(1000,1000)
abline(stat_model, col="Red")
a = 1
b = 2
c = a+b
c
a <- 1
b <- 2
c <- a+b
c
which.max(augment(stat_model)$.cooksd)
batting[438,]
batting999 <- subset(batting, !batting[438,])
which.max(augment(stat_model)$.cooksd)
batting[438,]
batting999 <- subset(batting, !is.batting[438,])
which.max(augment(stat_model)$.cooksd)
batting[438,]
batting999 <- batting[-438,]
plot(1000,1000)
abline(stat_model, col="Red")
which.max(augment(stat_model)$.cooksd)
batting[438,]
batting999 <- batting[-438,]
stat_model2 <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting999)
plot(1000,1000)
abline(stat_model, col="Red")
abline(stat_model2, col="Red")
which.max(augment(stat_model)$.cooksd)
batting[438,]
batting999 <- batting[-438,]
stat_model2 <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting999)
plot(100,100)
abline(stat_model, col="Red")
abline(stat_model2, col="Red")
which.max(augment(stat_model)$.cooksd)
batting[438,]
batting999 <- batting[-438,]
stat_model2 <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting999)
plot(10,10)
abline(stat_model, col="Red")
abline(stat_model2, col="Red")
chosen_model <- lm(RUNS~ HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting)
chosen_model <- lm(RUNS~ HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting)
stat_model <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting)
res <- resid(stat_model)
plot(fitted(stat_model), res, ylab = 'Residuals', xlab = 'Fitted Model')
abline(0,0)
summary(lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting))
which.max(augment(stat_model)$.cooksd)
batting[438,]
batting999 <- batting[-438,]
stat_model2 <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting999)
plot(100,100)
abline(stat_model, col="Red")
abline(stat_model2, col="Red")
which.max(augment(stat_model)$.cooksd)
batting[438,]
batting999 <- batting[-438,]
stat_model2 <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting999)
plot(1000,1000)
abline(stat_model, col="Red")
abline(stat_model2, col="Red")
which.max(augment(stat_model)$.cooksd)
batting[438,]
batting999 <- batting[-438,]
stat_model2 <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting999)
plot(1,1)
abline(stat_model, col="Red")
abline(stat_model2, col="Red")
which.max(augment(stat_model)$.cooksd)
batting[438,]
batting999 <- batting[-438,]
stat_model2 <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting999)
plot(2,2)
abline(stat_model, col="Red")
abline(stat_model2, col="Red")
which.max(augment(stat_model)$.cooksd)
batting[438,]
batting999 <- batting[-438,]
stat_model2 <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting999)
plot(5,5)
abline(stat_model, col="Red")
abline(stat_model2, col="Red")
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
library(tidymodels)
library(leaps)
model_1 <- lm(RUNS~INT_WALKS + SINGLES + TRIPLE + STOLEN_BASES + HOME_RUNS, data = batting)
model_2 <- lm(RUNS~SINGLES + TRIPLE + HOME_RUNS, data = batting)
anova(model_1, model_2)
summary(lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting))
stat_model <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting)
res <- resid(stat_model)
plot(fitted(stat_model), res, ylab = 'Residuals', xlab = 'Fitted Model')
abline(0,0)
stat_model <- regsubsets(RUNS~HOME_RUNS + TRIPLE + DOUBLE + SINGLES + WALKS + INT_WALKS + STOLEN_BASES + HIT_BY_PITCH, data = batting,
method = 'seqrep',
nbest = 1,
nvmax = 4)
summary(stat_model)
