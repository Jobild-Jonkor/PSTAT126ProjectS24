# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
library(tidymodels)
library(leaps)
library(glmnet)
library(gridExtra)
library(corrr)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
# Scree plot - importance of each component//contribution to total variance
fviz_eig(data.pca, addlabels=TRUE, main = "")
# Biplot of the attributes - visualize similarities between samples and see impact of each attribute on components
fviz_pca_var(data.pca, col.var="black")
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
library(tidymodels)
library(leaps)
library(glmnet)
library(gridExtra)
library(corrr)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="../../data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
# x and y setup with current dataset
y <- batting$RUNS
x <- data.matrix(batting[, c('AT_BAT', 'TRIPLE', 'HOME_RUNS', 'SINGLES', 'WALKS', 'DOUBLE', 'INT_WALKS', 'STOLEN_BASES', 'HIT_BY_PITCH')])
stat_model <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting)
slm <- lm(RUNS~DOUBLE, data = batting)
tempco <- round(cor(batting[,c('AT_BAT', 'TRIPLE', 'HOME_RUNS', 'SINGLES', 'WALKS', 'DOUBLE', 'INT_WALKS', 'STOLEN_BASES', 'HIT_BY_PITCH')]), 2)
ik <- 1
modmat <- model.matrix(lm(RUNS~AT_BAT + TRIPLE + HOME_RUNS + SINGLES + WALKS + DOUBLE + INT_WALKS + STOLEN_BASES + HIT_BY_PITCH, data=batting))
vif(modmat)
ridge_model <- glmnet(x, y, alpha = 0)
cv_model_ridge <- cv.glmnet(x, y, alpha = 0)
# find optimal lambda value that minimizes test MSE
best_lambda_r <- cv_model_ridge$lambda.min
# produce plot of test MSE by lambda value
plot(cv_model_ridge)
#calculate R-squared
y_predicted <- predict(ridge_model, s = best_lambda_r, newx =x)
#SST and SSE
sst <- sum((y-mean(y))^2)
sse <- sum((y_predicted - y)^2)
rsq <- 1-(sse/sst)
rsq
temp_ridge <- cv.glmnet(x, y, alpha = 0)
coef(temp_ridge)
model <- glmnet(x, y, alpha = 1)
cv_model <- cv.glmnet(x, y, alpha = 1)
# find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
# produce plot of test MSE by lambda value
plot(cv_model)
#calculate R-squared
y_predicted <- predict(model, s = best_lambda, newx =x)
#SST and SSE
sst <- sum((y-mean(y))^2)
sse <- sum((y_predicted - y)^2)
rsq <- 1-(sse/sst)
temp_lasso <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(temp_lasso)
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
set.seed(4)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
x <- data.matrix(batting[, c('AT_BAT', 'TRIPLE', 'HOME_RUNS', 'SINGLES', 'WALKS', 'DOUBLE', 'INT_WALKS', 'STOLEN_BASES', 'HIT_BY_PITCH')])
ridge_model_y_predictions <- data.frame(Prediction = 1:500, Actual= 1:500)
ridge_model_y_predictions[,1] <- predict(ridge_model, s = best_lambda_r, newx = x)
ridge_model_y_predictions[,2] <- batting$RUNS
lasso_model_y_predictions <- data.frame(Prediction = 1:500, Actual = 1:500)
lasso_model_y_predictions[,1] <- predict(cv_model, s = best_lambda, newx = x)
lasso_model_y_predictions[,2] <- batting$RUNS
stat_model_y_predictions <- data.frame(Prediction = 1:500, Actual = 1:500)
stat_model_y_predictions[,1] <- predict(stat_model, newdata = batting)
stat_model_y_predictions[,2] <- batting$RUNS
slm_y_predictions <- data.frame(Prediction = 1:500, Actual = 1:500)
slm_y_predictions[,1] <- predict(slm, newdata = batting)
slm_y_predictions[,2] <- batting$RUNS
#Rsquare finder
#SLR
#MLR
#Ridge
#Lasso
ggplot() +
geom_point(aes(x=Prediction, y=Actual, color="SLM"), slm_y_predictions, size =0.25 )+
geom_smooth(aes(x=Prediction, y=Actual, color="SLM"), slm_y_predictions, method = lm, fullrange =TRUE, size = 0.75)+
geom_point(aes(x=Prediction, y=Actual, color="MLR"), stat_model_y_predictions,size = 0.25) +
geom_smooth(aes(x=Prediction, y=Actual, color="MLR"), stat_model_y_predictions, method = lm, fullrange =TRUE, size = 0.75)+
geom_point(aes(x=Prediction, y=Actual, color="Ridge Model"), ridge_model_y_predictions, size =0.25)+
geom_smooth(aes(x=Prediction, y=Actual, color="Ridge Model"), ridge_model_y_predictions, method = lm, fullrange =TRUE, size = 0.75)+
geom_point(aes(x=Prediction, y=Actual, color="Lasso Model"), lasso_model_y_predictions, size =0.25 )+
geom_smooth(aes(x=Prediction, y=Actual, color="Lasso Model"), lasso_model_y_predictions, method = lm, fullrange =TRUE, size = 0.75)+
labs(color = "Model")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
# Removing unnecessary columns
numerical_data <- batting[,4:11]
# Data normalization
data_normalized <- scale(numerical_data)
# PCA computation - computing our eigenvalues
data.pca <- princomp(data_normalized)
summary(data.pca) # components one and two have the highest variance
# Loading matrix
data.pca$loadings[, 1:2] # weights of component one are pretty evenly spread, while component two puts more weight on hit by pitch and triples
# Scree plot - importance of each component//contribution to total variance
fviz_eig(data.pca, addlabels=TRUE)
# Biplot of the attributes - visualize similarities between samples and see impact of each attribute on components
fviz_pca_var(data.pca, col.var="black")
# Contribution of each variable - how much each variable is represented in a given component (utilizing square cosine)
# High value means good representation
fviz_cos2(data.pca, choice="var", axes=1:2)
# Biplot combined with cos2
fviz_pca_var(data.pca, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
repel = TRUE)
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
library(tidymodels)
library(leaps)
library(glmnet)
library(gridExtra)
library(corrr)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="../../data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
# x and y setup with current dataset
y <- batting$RUNS
x <- data.matrix(batting[, c('TRIPLE', 'HOME_RUNS', 'SINGLES', 'WALKS', 'DOUBLE', 'INT_WALKS', 'STOLEN_BASES', 'HIT_BY_PITCH')])
stat_model <- lm(RUNS~HOME_RUNS + SINGLES + WALKS + STOLEN_BASES, data = batting)
slm <- lm(RUNS~DOUBLE, data = batting)
tempco <- round(cor(batting[,c('TRIPLE', 'HOME_RUNS', 'SINGLES', 'WALKS', 'DOUBLE', 'INT_WALKS', 'STOLEN_BASES', 'HIT_BY_PITCH')]), 2)
ik <- 1
modmat <- model.matrix(lm(RUNS~TRIPLE + HOME_RUNS + SINGLES + WALKS + DOUBLE + INT_WALKS + STOLEN_BASES + HIT_BY_PITCH, data=batting))
vif(modmat)
ridge_model <- glmnet(x, y, alpha = 0)
cv_model_ridge <- cv.glmnet(x, y, alpha = 0)
# find optimal lambda value that minimizes test MSE
best_lambda_r <- cv_model_ridge$lambda.min
# produce plot of test MSE by lambda value
plot(cv_model_ridge)
#calculate R-squared
y_predicted <- predict(ridge_model, s = best_lambda_r, newx =x)
#SST and SSE
sst <- sum((y-mean(y))^2)
sse <- sum((y_predicted - y)^2)
rsq <- 1-(sse/sst)
temp_ridge <- cv.glmnet(x, y, alpha = 0)
coef(temp_ridge)
model <- glmnet(x, y, alpha = 1)
cv_model <- cv.glmnet(x, y, alpha = 1)
# find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
# produce plot of test MSE by lambda value
plot(cv_model)
#calculate R-squared
y_predicted <- predict(model, s = best_lambda, newx =x)
#SST and SSE
sst <- sum((y-mean(y))^2)
sse <- sum((y_predicted - y)^2)
rsq <- 1-(sse/sst)
temp_lasso <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(temp_lasso)
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
set.seed(4)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
x <- data.matrix(batting[, c('TRIPLE', 'HOME_RUNS', 'SINGLES', 'WALKS', 'DOUBLE', 'INT_WALKS', 'STOLEN_BASES', 'HIT_BY_PITCH')])
ridge_model_y_predictions <- data.frame(Prediction = 1:500, Actual= 1:500)
ridge_model_y_predictions[,1] <- predict(ridge_model, s = best_lambda_r, newx = x)
ridge_model_y_predictions[,2] <- batting$RUNS
lasso_model_y_predictions <- data.frame(Prediction = 1:500, Actual = 1:500)
lasso_model_y_predictions[,1] <- predict(cv_model, s = best_lambda, newx = x)
lasso_model_y_predictions[,2] <- batting$RUNS
stat_model_y_predictions <- data.frame(Prediction = 1:500, Actual = 1:500)
stat_model_y_predictions[,1] <- predict(stat_model, newdata = batting)
stat_model_y_predictions[,2] <- batting$RUNS
slm_y_predictions <- data.frame(Prediction = 1:500, Actual = 1:500)
slm_y_predictions[,1] <- predict(slm, newdata = batting)
slm_y_predictions[,2] <- batting$RUNS
#Rsquare finder
#SLR
#MLR
#Ridge
#Lasso
ggplot() +
geom_point(aes(x=Prediction, y=Actual, color="SLM"), slm_y_predictions, size =0.25 )+
geom_smooth(aes(x=Prediction, y=Actual, color="SLM"), slm_y_predictions, method = lm, fullrange =TRUE, size = 0.75)+
geom_point(aes(x=Prediction, y=Actual, color="MLR"), stat_model_y_predictions,size = 0.25) +
geom_smooth(aes(x=Prediction, y=Actual, color="MLR"), stat_model_y_predictions, method = lm, fullrange =TRUE, size = 0.75)+
geom_point(aes(x=Prediction, y=Actual, color="Ridge Model"), ridge_model_y_predictions, size =0.25)+
geom_smooth(aes(x=Prediction, y=Actual, color="Ridge Model"), ridge_model_y_predictions, method = lm, fullrange =TRUE, size = 0.75)+
geom_point(aes(x=Prediction, y=Actual, color="Lasso Model"), lasso_model_y_predictions, size =0.25 )+
geom_smooth(aes(x=Prediction, y=Actual, color="Lasso Model"), lasso_model_y_predictions, method = lm, fullrange =TRUE, size = 0.75)+
labs(color = "Model")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
# Removing unnecessary columns
numerical_data <- batting[,4:11]
# Data normalization
data_normalized <- scale(numerical_data)
# PCA computation - computing our eigenvalues
data.pca <- princomp(data_normalized)
summary(data.pca) # components one and two have the highest variance
# Loading matrix
data.pca$loadings[, 1:2] # weights of component one are pretty evenly spread, while component two puts more weight on hit by pitch and triples
# Scree plot - importance of each component//contribution to total variance
fviz_eig(data.pca, addlabels=TRUE)
# Biplot of the attributes - visualize similarities between samples and see impact of each attribute on components
fviz_pca_var(data.pca, col.var="black")
# Contribution of each variable - how much each variable is represented in a given component (utilizing square cosine)
# High value means good representation
fviz_cos2(data.pca, choice="var", axes=1:2)
# Biplot combined with cos2
fviz_pca_var(data.pca, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
repel = TRUE)
