FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
y <- batting$RUNS
x <- data.matrix(batting[, c('AT_BAT', 'HOME_RUNS', 'SINGLES', 'WALKS', 'STOLEN_BASES', 'WALKS', 'INT_WALKS', 'STOLEN_BASES', 'HIT_BY_PITCH')])
ridge_model <- glmnet(x, y, alpha = 0)
summary(ridge_model)
cv_model_ridge <- cv.glmnet(x, y, alpha = 0)
# find optimal lambda value that minimizes test MSE
best_lambda_r <- cv_model_ridge$lambda.min
best_lambda_r
# produce plot of test MSE by lambda value
plot(cv_model_ridge)
#find coefficients of best model
best_model_ridge <- glmnet(x, y, alpha=0, lamba = best_lamba_r)
#coef(best_model)
# produce ridge trace plot
plot(model, xvar = 'lambda')
#calculate R-squared
y_predicted_ridge <- predict(model, s = best_lambda, newx =x)
#SST and SSE
sst <- sum((y-mean(y))^2)
sse <- sum((y_predicted_ridge - y)^2)
rsq <- 1-(sse/sst)
rsq
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
library(tidymodels)
library(leaps)
library(glmnet)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="../../data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
y <- batting$RUNS
x <- data.matrix(batting[, c('AT_BAT', 'HOME_RUNS', 'SINGLES', 'WALKS', 'STOLEN_BASES', 'WALKS', 'INT_WALKS', 'STOLEN_BASES', 'HIT_BY_PITCH')])
ridge_model <- glmnet(x, y, alpha = 0)
summary(ridge_model)
cv_model_ridge <- cv.glmnet(x, y, alpha = 0)
# find optimal lambda value that minimizes test MSE
best_lambda_r <- cv_model_ridge$lambda.min
best_lambda_r
# produce plot of test MSE by lambda value
plot(cv_model_ridge)
#find coefficients of best model
best_model_ridge <- glmnet(x, y, alpha=0, lamba = best_lamba_r)
#coef(best_model)
# produce ridge trace plot
plot(model, xvar = 'lambda')
#calculate R-squared
y_predicted <- predict(model, s = best_lambda, newx =x)
#SST and SSE
sst <- sum((y-mean(y))^2)
sse <- sum((y_predicted - y)^2)
rsq <- 1-(sse/sst)
rsq
ridge_model <- glmnet(x, y, alpha = 0)
summary(ridge_model)
cv_model_ridge <- cv.glmnet(x, y, alpha = 0)
# find optimal lambda value that minimizes test MSE
best_lambda_r <- cv_model_ridge$lambda.min
best_lambda_r
# produce plot of test MSE by lambda value
plot(cv_model_ridge)
#find coefficients of best model
best_model_ridge <- glmnet(x, y, alpha=0, lamba = best_lamba_r)
#coef(best_model)
# produce ridge trace plot
plot(model, xvar = 'lambda')
cv_model_ridge <- cv.glmnet(x, y, alpha = 0)
# find optimal lambda value that minimizes test MSE
best_lambda_r <- cv_model_ridge$lambda.min
best_lambda_r
# produce plot of test MSE by lambda value
plot(cv_model_ridge)
# produce ridge trace plot
plot(model, xvar = 'lambda')
#calculate R-squared
y_predicted <- predict(model, s = best_lambda_r, newx =x)
#SST and SSE
sst <- sum((y-mean(y))^2)
sse <- sum((y_predicted - y)^2)
rsq <- 1-(sse/sst)
rsq
#calculate R-squared
y_predicted <- predict(model, s = best_lambda, newx =x)
#SST and SSE
sst <- sum((y-mean(y))^2)
sse <- sum((y_predicted - y)^2)
rsq <- 1-(sse/sst)
rsq
#find coefficients of best model
best_model_ridge <- glmnet(x, y, alpha=0, lamba = best_lamba_r)
#coef(best_model_ridge)
#calculate R-squared
y_predicted <- predict(model, s = best_lambda, newx =x)
#SST and SSE
sst <- sum((y-mean(y))^2)
sse <- sum((y_predicted - y)^2)
rsq <- 1-(sse/sst)
rsq
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
library(tidymodels)
library(leaps)
library(glmnet)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="../../data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
y <- batting$RUNS
x <- data.matrix(batting[, c('AT_BAT', 'HOME_RUNS', 'SINGLES', 'WALKS', 'STOLEN_BASES', 'WALKS', 'INT_WALKS', 'STOLEN_BASES', 'HIT_BY_PITCH')])
ridge_model <- glmnet(x, y, alpha = 0)
summary(ridge_model)
cv_model_ridge <- cv.glmnet(x, y, alpha = 0)
# find optimal lambda value that minimizes test MSE
best_lambda_r <- cv_model_ridge$lambda.min
best_lambda_r
# produce plot of test MSE by lambda value
plot(cv_model_ridge)
#find coefficients of best model
best_model <- glmnet(x, y, alpha=0, lamba = best_lamba_r)
#coef(best_model_ridge)
# produce ridge trace plot
plot(model, xvar = 'lambda')
#calculate R-squared
y_predicted <- predict(model, s = best_lambda, newx =x)
#SST and SSE
sst <- sum((y-mean(y))^2)
sse <- sum((y_predicted - y)^2)
rsq <- 1-(sse/sst)
rsq
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
library(tidymodels)
library(leaps)
library(glmnet)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="../../data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
y <- batting$RUNS
x <- data.matrix(batting[, c('AT_BAT', 'HOME_RUNS', 'SINGLES', 'WALKS', 'STOLEN_BASES', 'WALKS', 'INT_WALKS', 'STOLEN_BASES', 'HIT_BY_PITCH')])
ridge_model <- glmnet(x, y, alpha = 0)
summary(ridge_model)
cv_model_ridge <- cv.glmnet(x, y, alpha = 0)
# find optimal lambda value that minimizes test MSE
best_lambda_r <- cv_model_ridge$lambda.min
best_lambda_r
# produce plot of test MSE by lambda value
plot(cv_model_ridge)
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
library(tidymodels)
library(leaps)
library(glmnet)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="../../data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
y <- batting$RUNS
x <- data.matrix(batting[, c('AT_BAT', 'HOME_RUNS', 'SINGLES', 'WALKS', 'STOLEN_BASES', 'WALKS', 'INT_WALKS', 'STOLEN_BASES', 'HIT_BY_PITCH')])
ridge_model <- glmnet(x, y, alpha = 0)
summary(ridge_model)
cv_model_ridge <- cv.glmnet(x, y, alpha = 0)
# find optimal lambda value that minimizes test MSE
best_lambda_r <- cv_model_ridge$lambda.min
best_lambda_r
# produce plot of test MSE by lambda value
plot(cv_model_ridge)
#find coefficients of best model
best_model <- glmnet(x, y, alpha=0, lamba = best_lamba_r)
#coef(best_model_ridge)
# produce ridge trace plot
plot(model, xvar = 'lambda')
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
library(tidymodels)
library(leaps)
library(glmnet)
ball <- dbConnect(drv=RSQLite::SQLite(), dbname="../../data/database.sqlite")
batting <- dbGetQuery(ball, "
SELECT
sum(ab) AS AT_BAT,
player_id,
sum(r) AS RUNS,
sum(hr) AS HOME_RUNS,
sum(triple) AS TRIPLE,
sum(double) AS DOUBLE,
(sum(h) -  sum(hr) - sum(triple) - sum(double)) AS SINGLES,
sum(bb) AS WALKS,
sum(ibb) AS INT_WALKS,
sum(sb) AS STOLEN_BASES,
sum(hbp) AS HIT_BY_PITCH
FROM
batting
where
year > 2000
group by
player_id
")
sumbat <- batting
batting <- subset(batting,batting[,1]>100)
for (x in 3:11)
{
batting[,x] <- batting[,x] / 1
}
set.seed(5)
batting <- sample_n(batting, 500, replace = FALSE)
players <- dbGetQuery(ball, "
SELECT
player_id,
(weight / POWER(height, 2)) *703 AS BMI,
bats as HAND
FROM
player
")
players <- subset(players, players[,2]>0)
for ( x in 1:17918)
{
if(players[x,2] <= 18.5) {players[x,2] <- "U"}
else if(players[x,2] <= 24.9) {players[x,2] <- "H"}
else if(players[x,2] <= 29.9) {players[x,2] <- "O"}
else {players[x,2] <- "B"}
}
batting <-  merge(batting, players, by="player_id" )
y <- batting$RUNS
x <- data.matrix(batting[, c('AT_BAT', 'HOME_RUNS', 'SINGLES', 'WALKS', 'STOLEN_BASES', 'WALKS', 'INT_WALKS', 'STOLEN_BASES', 'HIT_BY_PITCH')])
ridge_model <- glmnet(x, y, alpha = 0)
summary(ridge_model)
cv_model_ridge <- cv.glmnet(x, y, alpha = 0)
# find optimal lambda value that minimizes test MSE
best_lambda_r <- cv_model_ridge$lambda.min
best_lambda_r
# produce plot of test MSE by lambda value
plot(cv_model_ridge)
#find coefficients of best model
best_model <- glmnet(x, y, alpha=0, lamba = best_lamba_r)
#coef(best_model_ridge)
# produce ridge trace plot
plot(ridge_model, xvar = 'lambda')
#calculate R-squared
y_predicted <- predict(ridge_model, s = best_lambda, newx =x)
#calculate R-squared
y_predicted <- predict(ridge_model, s = best_lambda_r, newx =x)
#SST and SSE
sst <- sum((y-mean(y))^2)
sse <- sum((y_predicted - y)^2)
rsq <- 1-(sse/sst)
rsq
# knit options
knitr::opts_chunk$set(echo = F,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(faraway)
library(RSQLite)
library(skimr)
library(GGally)
library(tidymodels)
library(leaps)
library(glmnet)
ridge_model <- glmnet(x, y, alpha = 0)
summary(ridge_model)
cv_model <- cv.glmnet(x, y, alpha = 1)
# find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
# produce plot of test MSE by lambda value
plot(cv_model)
